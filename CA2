#include <iostream>
#include <queue>
using namespace std;

struct Process 
{
    int pid;
    int priority;
    int burst_time;
};

void roundRobin(queue<Process>& q, int quantum) 
{
    if(q.empty()) return;
    Process p = q.front();
    q.pop();
    if(p.burst_time > quantum) 
    {
        p.burst_time -= quantum;
        q.push(p);
    }
    else 
        cout << "Process " << p.pid << " finished execution." << endl;
}

void priorityScheduling(queue<Process>& q)
{
    if(q.empty()) return;
    Process p = q.front();
    q.pop();
    cout << "Process " << p.pid << " finished execution." << endl;
}

void fcfs(queue<Process>& q) 
{
    if(q.empty()) return;
    Process p = q.front();
    q.pop();
    cout << "Process " << p.pid << " finished execution." << endl;
}

int main() 
{
    queue<Process> q1, q2, q3;
    int n;
    cout << "Enter the number of processes: ";
    cin >> n;
    for(int i=1; i<=n; i++) 
    {
        int priority, burst_time;
        cout << "Enter the priority and burst time of process " << i << ": ";
        cin >> priority >> burst_time;
        Process p = {i, priority, burst_time};
        if(priority >= 1 && priority <= 3) 
            q3.push(p);
        else if(priority >= 4 && priority <= 6) 
            q2.push(p);
        else 
            q1.push(p);
    }
    int quantum = 4;
    int t = 0;
    while(!q1.empty() || !q2.empty() || !q3.empty())
     {
        if(!q1.empty()) 
        {
            fcfs(q1);
            if(t % 10 == 0) 
                t = 0;
            else
                t += 10;
        }
        else if(!q2.empty())
        {
            priorityScheduling(q2);
            if(t % 10 == 0) 
                t = 0;
            else 
                t += 10;
        }
        else if(!q3.empty()) 
        {
            int q_size = q3.size();
            for(int i=0; i<q_size; i++) 
                roundRobin(q3, quantum);
            if(t % 10 == 0) 
                t = 0;
            else 
                t += 10;
        }
    }
    return 0;
}
